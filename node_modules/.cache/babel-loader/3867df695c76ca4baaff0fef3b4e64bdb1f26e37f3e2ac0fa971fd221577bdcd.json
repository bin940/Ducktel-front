{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, withModifiers as _withModifiers, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"login-container\"\n};\nconst _hoisted_2 = {\n  class: \"social-login\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", null, \"로그인\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.handleLogin && $options.handleLogin(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_createElementVNode(\"label\", null, [_cache[6] || (_cache[6] = _createTextVNode(\"아이디: \")), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.username = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.username]])])]), _createElementVNode(\"div\", null, [_createElementVNode(\"label\", null, [_cache[7] || (_cache[7] = _createTextVNode(\"비밀번호: \")), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]])])]), _cache[8] || (_cache[8] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"로그인\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), _createVNode(_component_router_link, {\n    to: \"/register\"\n  }, {\n    default: _withCtx(() => _cache[9] || (_cache[9] = [_createTextVNode(\"회원가입\")])),\n    _: 1 /* STABLE */\n  }), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => $options.socialLogin('google')),\n    class: \"google-btn\"\n  }, \"구글로 로그인\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = $event => $options.socialLogin('kakao')),\n    class: \"kakao-btn\"\n  }, \"카카오로 로그인\"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = $event => $options.socialLogin('naver')),\n    class: \"naver-btn\"\n  }, \"네이버로 로그인\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","handleLogin","_createTextVNode","$event","$data","username","required","type","password","_createVNode","_component_router_link","to","default","_withCtx","_","_hoisted_2","onClick","socialLogin"],"sources":["C:\\Users\\mycoms\\Desktop\\study\\duckfront\\src\\components\\LoginForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <h2>로그인</h2>\r\n    <form @submit.prevent=\"handleLogin\">\r\n      <div>\r\n        <label>아이디: <input v-model=\"username\" required /></label>\r\n      </div>\r\n      <div>\r\n        <label>비밀번호: <input type=\"password\" v-model=\"password\" required /></label>\r\n      </div>\r\n      <button type=\"submit\">로그인</button>\r\n    </form>\r\n    <router-link to=\"/register\">회원가입</router-link>\r\n\r\n    <div class=\"social-login\">\r\n      <button @click=\"socialLogin('google')\" class=\"google-btn\">구글로 로그인</button>\r\n      <button @click=\"socialLogin('kakao')\" class=\"kakao-btn\">카카오로 로그인</button>\r\n      <button @click=\"socialLogin('naver')\" class=\"naver-btn\">네이버로 로그인</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"../api\"; \r\n\r\nexport default {\r\n  name: \"LoginForm\",\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      password: \"\",\r\n    };\r\n  },\r\n  mounted() {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    if (urlParams.has(\"accessToken\")) {\r\n      this.handleSocialLoginCallback();\r\n    }\r\n  },\r\n  methods: {\r\n  async handleLogin() {\r\n    try {\r\n      const formData = new URLSearchParams();\r\n      formData.append(\"username\", this.username);\r\n      formData.append(\"password\", this.password);\r\n\r\n      const response = await api.post(\"/api/auth/login\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n      });\r\n\r\n      console.log(\"✅ 로그인 성공:\", response.data);\r\n      this.processLoginResponse(response.data); // 🔹 메서드 호출\r\n\r\n    } catch (error) {\r\n      const errorResponse = error.response?.data;\r\n      console.error(\"❌ 로그인 실패:\", errorResponse?.message || error.message);\r\n    }\r\n  },\r\n\r\n  processLoginResponse(data) { // 🔹 추가된 메서드\r\n    if (!data.accessToken || !data.refreshToken) {\r\n      console.error(\"❌ 로그인 응답에 토큰 없음\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"토큰 저장 중...\");\r\n    localStorage.setItem(\"accessToken\", data.accessToken);\r\n    localStorage.setItem(\"refreshToken\", data.refreshToken);\r\n\r\n    // 🔹 로그인 후 이동할 경로 설정 (기본값: '/')\r\n    const redirectUrl = sessionStorage.getItem(\"redirectUrl\") || \"/\";\r\n    sessionStorage.removeItem(\"redirectUrl\");\r\n\r\n    console.log(`로그인 성공, ${redirectUrl}로 이동`);\r\n    this.$router.push(redirectUrl); \r\n  },\r\n\r\n  socialLogin(provider) {\r\n    const redirectUri = `${window.location.origin}/login?redirect=${encodeURIComponent(this.$route.fullPath)}`;\r\n    const authUrl = `http://localhost:8090/oauth2/authorization/${provider}?redirect_uri=${encodeURIComponent(redirectUri)}`;\r\n\r\n    console.log(`소셜 로그인 리다이렉트: ${authUrl}`);\r\n    window.location.href = authUrl;\r\n  },\r\n\r\n  handleSocialLoginCallback() {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const accessToken = urlParams.get(\"accessToken\");\r\n    const refreshToken = urlParams.get(\"refreshToken\");\r\n    const loginType = urlParams.get(\"loginType\");\r\n\r\n    if (accessToken && refreshToken && loginType) {\r\n      console.log(\"소셜 로그인 성공 - 토큰:\", accessToken);\r\n      localStorage.setItem(\"accessToken\", accessToken);\r\n      localStorage.setItem(\"refreshToken\", refreshToken);\r\n      localStorage.setItem(\"loginType\", loginType);\r\n\r\n      console.log(\"저장된 accessToken 확인:\", localStorage.getItem(\"accessToken\"));\r\n      console.log(\"저장된 refreshToken 확인:\", localStorage.getItem(\"refreshToken\"));\r\n\r\n      const redirectUrl = sessionStorage.getItem(\"redirectUrl\") || \"/\";\r\n      sessionStorage.removeItem(\"redirectUrl\");\r\n      this.$router.push(redirectUrl);\r\n\r\n      window.history.replaceState({}, document.title, \"/login\");\r\n    } else {\r\n      console.error(\"소셜 로그인 실패: 필요한 토큰 정보가 없습니다.\");\r\n    }\r\n  }\r\n}\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  max-width: 400px;\r\n  margin: 50px auto;\r\n  padding: 20px;\r\n}\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\nbutton {\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n}\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n.social-login {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n.google-btn {\r\n  background-color: #4285f4;\r\n}\r\n.google-btn:hover {\r\n  background-color: #357abd;\r\n}\r\n.kakao-btn {\r\n  background-color: #fee500;\r\n  color: #3c1e1e;\r\n}\r\n.kakao-btn:hover {\r\n  background-color: #e6ce00;\r\n}\r\n.naver-btn {\r\n  background-color: #03c75a;\r\n}\r\n.naver-btn:hover {\r\n  background-color: #02a44f;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAarBA,KAAK,EAAC;AAAc;;;uBAb3BC,mBAAA,CAkBM,OAlBNC,UAkBM,G,4BAjBJC,mBAAA,CAAY,YAAR,KAAG,sBACPA,mBAAA,CAQO;IARAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;MAChCJ,mBAAA,CAEM,cADJA,mBAAA,CAAyD,gB,0BALjEO,gBAAA,CAKe,OAAK,I,gBAAAP,mBAAA,CAAqC;IALzD,uBAAAE,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAKoCC,KAAA,CAAAC,QAAQ,GAAAF,MAAA;IAAEG,QAAQ,EAAR;iDAAVF,KAAA,CAAAC,QAAQ,E,OAEtCV,mBAAA,CAEM,cADJA,mBAAA,CAA0E,gB,0BARlFO,gBAAA,CAQe,QAAM,I,gBAAAP,mBAAA,CAAqD;IAA9CY,IAAI,EAAC,UAAU;IAR3C,uBAAAV,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAQqDC,KAAA,CAAAI,QAAQ,GAAAL,MAAA;IAAEG,QAAQ,EAAR;iDAAVF,KAAA,CAAAI,QAAQ,E,iCAEvDb,mBAAA,CAAkC;IAA1BY,IAAI,EAAC;EAAQ,GAAC,KAAG,qB,4BAE3BE,YAAA,CAA8CC,sBAAA;IAAjCC,EAAE,EAAC;EAAW;IAZ/BC,OAAA,EAAAC,QAAA,CAYgC,MAAIhB,MAAA,QAAAA,MAAA,OAZpCK,gBAAA,CAYgC,MAAI,E;IAZpCY,CAAA;MAcInB,mBAAA,CAIM,OAJNoB,UAIM,GAHJpB,mBAAA,CAA0E;IAAjEqB,OAAK,EAAAnB,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAAEH,QAAA,CAAAiB,WAAW;IAAYzB,KAAK,EAAC;KAAa,SAAO,GACjEG,mBAAA,CAAyE;IAAhEqB,OAAK,EAAAnB,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAAEH,QAAA,CAAAiB,WAAW;IAAWzB,KAAK,EAAC;KAAY,UAAQ,GAChEG,mBAAA,CAAyE;IAAhEqB,OAAK,EAAAnB,MAAA,QAAAA,MAAA,MAAAM,MAAA,IAAEH,QAAA,CAAAiB,WAAW;IAAWzB,KAAK,EAAC;KAAY,UAAQ,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}