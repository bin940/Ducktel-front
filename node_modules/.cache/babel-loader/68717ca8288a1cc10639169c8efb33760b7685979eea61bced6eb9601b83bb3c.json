{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport api from \"../api\";\nexport default {\n  name: \"LoginForm\",\n  data() {\n    return {\n      username: \"\",\n      password: \"\"\n    };\n  },\n  mounted() {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has(\"accessToken\")) {\n      this.handleSocialLoginCallback();\n    }\n  },\n  methods: {\n    async handleLogin() {\n      try {\n        const formData = new URLSearchParams();\n        formData.append(\"username\", this.username);\n        formData.append(\"password\", this.password);\n        const response = await api.post(\"/api/auth/login\", formData, {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          }\n        });\n        this.processLoginResponse(response.data);\n      } catch (error) {\n        const errorResponse = error.response?.data;\n        console.error(\"로그인 실패:\", errorResponse?.message || error.message);\n      }\n    },\n    socialLogin(provider) {\n      const redirectUri = `${window.location.origin}/login`;\n      const authUrl = `http://localhost:8090/oauth2/authorization/${provider}?redirect_uri=${encodeURIComponent(redirectUri)}`;\n      console.log(`소셜 로그인 리다이렉트: ${authUrl}`);\n      window.location.href = authUrl;\n    },\n    handleSocialLoginCallback() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const accessToken = urlParams.get(\"accessToken\");\n      const refreshToken = urlParams.get(\"refreshToken\");\n      const loginType = urlParams.get(\"loginType\");\n      if (accessToken && refreshToken && loginType) {\n        console.log(\"소셜 로그인 성공 - 토큰:\", accessToken);\n        localStorage.setItem(\"accessToken\", accessToken);\n        localStorage.setItem(\"refreshToken\", refreshToken);\n        localStorage.setItem(\"loginType\", loginType);\n        console.log(\"저장된 accessToken 확인:\", localStorage.getItem(\"accessToken\"));\n        console.log(\"저장된 refreshToken 확인:\", localStorage.getItem(\"refreshToken\"));\n        const redirect = this.$route.query.redirect || \"/\";\n        this.$router.push(redirect);\n\n        // URL 쿼리 파라미터 정리 (선택)\n        window.history.replaceState({}, document.title, \"/login\");\n      } else {\n        console.error(\"소셜 로그인 실패: 필요한 토큰 정보가 없습니다.\");\n      }\n    },\n    processLoginResponse(result) {\n      console.log(\"백엔드 응답:\", result);\n      if (result.data && result.data.accessToken) {\n        console.log(\"로그인 성공 - 토큰:\", result.data.accessToken);\n        localStorage.setItem(\"accessToken\", result.data.accessToken);\n        localStorage.setItem(\"refreshToken\", result.data.refreshToken);\n        localStorage.setItem(\"loginType\", result.data.loginType);\n        console.log(\"저장된 accessToken 확인:\", localStorage.getItem(\"accessToken\"));\n        console.log(\"저장된 refreshToken 확인:\", localStorage.getItem(\"refreshToken\"));\n        const redirect = this.$route.query.redirect || \"/\";\n        this.$router.push(redirect);\n      } else {\n        console.error(\"로그인 실패: 토큰이 포함되지 않았습니다.\", result);\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","name","data","username","password","mounted","urlParams","URLSearchParams","window","location","search","has","handleSocialLoginCallback","methods","handleLogin","formData","append","response","post","headers","processLoginResponse","error","errorResponse","console","message","socialLogin","provider","redirectUri","origin","authUrl","encodeURIComponent","log","href","accessToken","get","refreshToken","loginType","localStorage","setItem","getItem","redirect","$route","query","$router","push","history","replaceState","document","title","result"],"sources":["C:\\Users\\mycoms\\Desktop\\study\\duckfront\\src\\components\\LoginForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <h2>로그인</h2>\r\n    <form @submit.prevent=\"handleLogin\">\r\n      <div>\r\n        <label>아이디: <input v-model=\"username\" required /></label>\r\n      </div>\r\n      <div>\r\n        <label>비밀번호: <input type=\"password\" v-model=\"password\" required /></label>\r\n      </div>\r\n      <button type=\"submit\">로그인</button>\r\n    </form>\r\n    <router-link to=\"/register\">회원가입</router-link>\r\n\r\n    <!-- 소셜 로그인 버튼 -->\r\n    <div class=\"social-login\">\r\n      <button @click=\"socialLogin('google')\" class=\"google-btn\">구글로 로그인</button>\r\n      <button @click=\"socialLogin('kakao')\" class=\"kakao-btn\">카카오로 로그인</button>\r\n      <button @click=\"socialLogin('naver')\" class=\"naver-btn\">네이버로 로그인</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"../api\";\r\n\r\nexport default {\r\n  name: \"LoginForm\",\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      password: \"\",\r\n    };\r\n  },\r\n mounted() {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    if (urlParams.has(\"accessToken\")) {\r\n        this.handleSocialLoginCallback();\r\n    }\r\n},\r\n  methods: {\r\n    async handleLogin() {\r\n      try {\r\n        const formData = new URLSearchParams();\r\n        formData.append(\"username\", this.username);\r\n        formData.append(\"password\", this.password);\r\n\r\n        const response = await api.post(\"/api/auth/login\", formData, {\r\n          headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          },\r\n        });\r\n        this.processLoginResponse(response.data);\r\n      } catch (error) {\r\n        const errorResponse = error.response?.data;\r\n        console.error(\"로그인 실패:\", errorResponse?.message || error.message);\r\n      }\r\n    },\r\n    socialLogin(provider) {\r\n      const redirectUri = `${window.location.origin}/login`;\r\n      const authUrl = `http://localhost:8090/oauth2/authorization/${provider}?redirect_uri=${encodeURIComponent(redirectUri)}`;\r\n      console.log(`소셜 로그인 리다이렉트: ${authUrl}`);\r\n      window.location.href = authUrl;\r\n    },\r\n    handleSocialLoginCallback() {\r\n      const urlParams = new URLSearchParams(window.location.search);\r\n      const accessToken = urlParams.get(\"accessToken\");\r\n      const refreshToken = urlParams.get(\"refreshToken\");\r\n      const loginType = urlParams.get(\"loginType\");\r\n\r\n      if (accessToken && refreshToken && loginType) {\r\n        console.log(\"소셜 로그인 성공 - 토큰:\", accessToken);\r\n        localStorage.setItem(\"accessToken\", accessToken);\r\n        localStorage.setItem(\"refreshToken\", refreshToken);\r\n        localStorage.setItem(\"loginType\", loginType);\r\n        console.log(\"저장된 accessToken 확인:\", localStorage.getItem(\"accessToken\"));\r\n        console.log(\"저장된 refreshToken 확인:\", localStorage.getItem(\"refreshToken\"));\r\n\r\n        const redirect = this.$route.query.redirect || \"/\";\r\n        this.$router.push(redirect);\r\n\r\n        // URL 쿼리 파라미터 정리 (선택)\r\n        window.history.replaceState({}, document.title, \"/login\");\r\n      } else {\r\n        console.error(\"소셜 로그인 실패: 필요한 토큰 정보가 없습니다.\");\r\n      }\r\n    },\r\n    processLoginResponse(result) {\r\n      console.log(\"백엔드 응답:\", result);\r\n      if (result.data && result.data.accessToken) {\r\n        console.log(\"로그인 성공 - 토큰:\", result.data.accessToken);\r\n        localStorage.setItem(\"accessToken\", result.data.accessToken);\r\n        localStorage.setItem(\"refreshToken\", result.data.refreshToken);\r\n        localStorage.setItem(\"loginType\", result.data.loginType);\r\n        console.log(\"저장된 accessToken 확인:\", localStorage.getItem(\"accessToken\"));\r\n        console.log(\"저장된 refreshToken 확인:\", localStorage.getItem(\"refreshToken\"));\r\n\r\n        const redirect = this.$route.query.redirect || \"/\";\r\n        this.$router.push(redirect);\r\n      } else {\r\n        console.error(\"로그인 실패: 토큰이 포함되지 않았습니다.\", result);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  max-width: 400px;\r\n  margin: 50px auto;\r\n  padding: 20px;\r\n}\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\nbutton {\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n}\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n.social-login {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n.google-btn {\r\n  background-color: #4285f4;\r\n}\r\n.google-btn:hover {\r\n  background-color: #357abd;\r\n}\r\n.kakao-btn {\r\n  background-color: #fee500;\r\n  color: #3c1e1e;\r\n}\r\n.kakao-btn:hover {\r\n  background-color: #e6ce00;\r\n}\r\n.naver-btn {\r\n  background-color: #03c75a;\r\n}\r\n.naver-btn:hover {\r\n  background-color: #02a44f;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}