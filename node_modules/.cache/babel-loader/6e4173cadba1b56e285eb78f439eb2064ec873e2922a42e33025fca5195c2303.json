{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"login-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"error-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"로그인\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.handleLogin && $options.handleLogin(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"label\", {\n    for: \"username\"\n  }, \"아이디:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"username\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.username = $event),\n    placeholder: \"아이디를 입력하세요\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.username]])]), _createElementVNode(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", {\n    for: \"password\"\n  }, \"비밀번호:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event),\n    placeholder: \"비밀번호를 입력하세요\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]])]), _cache[5] || (_cache[5] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"로그인\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), $data.errorMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"p\", null, [_createVNode(_component_router_link, {\n    to: \"/\"\n  }, {\n    default: _withCtx(() => _cache[6] || (_cache[6] = [_createTextVNode(\"홈으로 돌아가기\")])),\n    _: 1 /* STABLE */\n  })])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","handleLogin","for","type","id","$event","$data","username","placeholder","password","errorMessage","_hoisted_2","_toDisplayString","_createCommentVNode","_createVNode","_component_router_link","to","default","_withCtx","_createTextVNode","_"],"sources":["C:\\Users\\mycoms\\Desktop\\study\\duckfront\\src\\components\\LoginForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <h2>로그인</h2>\r\n    <form @submit.prevent=\"handleLogin\">\r\n      <div>\r\n        <label for=\"username\">아이디:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"username\"\r\n          v-model=\"username\"\r\n          placeholder=\"아이디를 입력하세요\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <label for=\"password\">비밀번호:</label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"password\"\r\n          v-model=\"password\"\r\n          placeholder=\"비밀번호를 입력하세요\"\r\n        />\r\n      </div>\r\n      <button type=\"submit\">로그인</button>\r\n    </form>\r\n    <p v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\r\n    <p>\r\n      <router-link to=\"/\">홈으로 돌아가기</router-link>\r\n    </p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"../api\";\r\n\r\nexport default {\r\n  name: \"LoginForm\",\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      password: \"\",\r\n      errorMessage: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    async handleLogin() {\r\n      this.errorMessage = \"\";\r\n      try {\r\n        const response = await api.post(\"/api/auth/login\", {\r\n          username: this.username,\r\n          password: this.password,\r\n        });\r\n        const result = response.data;\r\n        console.log(\"백엔드 응답:\", result);\r\n\r\n        if (result.data && result.data.accessToken) {\r\n          console.log(\"로그인 성공 - 토큰:\", result.data.accessToken);\r\n          localStorage.setItem(\"accessToken\", result.data.accessToken); // accessToken 저장\r\n          localStorage.setItem(\"refreshToken\", result.data.refreshToken); // refreshToken 저장\r\n          console.log(\"저장된 accessToken 확인:\", localStorage.getItem(\"accessToken\"));\r\n          console.log(\"저장된 refreshToken 확인:\", localStorage.getItem(\"refreshToken\"));\r\n          this.$router.push(\"/\"); \r\n        } else {\r\n          this.errorMessage = result.message || \"로그인에 실패했습니다.\";\r\n          console.error(\"로그인 실패:\", result);\r\n        }\r\n      } catch (error) {\r\n        const errorResponse = error.response?.data;\r\n        this.errorMessage = errorResponse?.message || \"로그인 중 오류가 발생했습니다.\";\r\n        console.error(\"로그인 실패:\", errorResponse || error.message);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  max-width: 400px;\r\n  margin: 50px auto;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n}\r\ndiv {\r\n  margin-bottom: 15px;\r\n}\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n}\r\ninput {\r\n  width: 100%;\r\n  padding: 8px;\r\n  box-sizing: border-box;\r\n}\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n/* 에러 메시지 스타일 */\r\n.error-message {\r\n  color: red;\r\n  margin-top: 10px;\r\n  font-size: 14px;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAD9BC,GAAA;EAwB2BD,KAAK,EAAC;;;;uBAvB/BE,mBAAA,CA2BM,OA3BNC,UA2BM,G,0BA1BJC,mBAAA,CAAY,YAAR,KAAG,sBACPA,mBAAA,CAoBO;IApBAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;MAChCJ,mBAAA,CAQM,c,0BAPJA,mBAAA,CAAkC;IAA3BO,GAAG,EAAC;EAAU,GAAC,MAAI,sB,gBAC1BP,mBAAA,CAKE;IAJAQ,IAAI,EAAC,MAAM;IACXC,EAAE,EAAC,UAAU;IARvB,uBAAAP,MAAA,QAAAA,MAAA,MAAAQ,MAAA,IASmBC,KAAA,CAAAC,QAAQ,GAAAF,MAAA;IACjBG,WAAW,EAAC;iDADHF,KAAA,CAAAC,QAAQ,E,KAIrBZ,mBAAA,CAQM,c,0BAPJA,mBAAA,CAAmC;IAA5BO,GAAG,EAAC;EAAU,GAAC,OAAK,sB,gBAC3BP,mBAAA,CAKE;IAJAQ,IAAI,EAAC,UAAU;IACfC,EAAE,EAAC,UAAU;IAjBvB,uBAAAP,MAAA,QAAAA,MAAA,MAAAQ,MAAA,IAkBmBC,KAAA,CAAAG,QAAQ,GAAAJ,MAAA;IACjBG,WAAW,EAAC;iDADHF,KAAA,CAAAG,QAAQ,E,+BAIrBd,mBAAA,CAAkC;IAA1BQ,IAAI,EAAC;EAAQ,GAAC,KAAG,qB,4BAElBG,KAAA,CAAAI,YAAY,I,cAArBjB,mBAAA,CAAmE,KAAnEkB,UAAmE,EAAAC,gBAAA,CAAnBN,KAAA,CAAAI,YAAY,oBAxBhEG,mBAAA,gBAyBIlB,mBAAA,CAEI,YADFmB,YAAA,CAA0CC,sBAAA;IAA7BC,EAAE,EAAC;EAAG;IA1BzBC,OAAA,EAAAC,QAAA,CA0B0B,MAAQrB,MAAA,QAAAA,MAAA,OA1BlCsB,gBAAA,CA0B0B,UAAQ,E;IA1BlCC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}