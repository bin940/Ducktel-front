{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from \"../api\";\nexport default {\n  name: \"NavBar\",\n  data() {\n    return {\n      isLoggedIn: !!localStorage.getItem(\"accessToken\")\n    };\n  },\n  methods: {\n    handleAuth() {\n      if (this.isLoggedIn) {\n        this.logout();\n      } else {\n        this.$router.push(\"/login\"); // 로그인 페이지로 이동\n      }\n    },\n    logout() {\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n      const loginType = localStorage.getItem(\"loginType\");\n      if (!refreshToken || !loginType) {\n        console.error(\"로그아웃 실패: 저장된 로그인 정보 없음\");\n        return;\n      }\n      api.post(\"/api/auth/logout\", {\n        refreshToken,\n        loginType\n      }).then(response => {\n        console.log(\"로그아웃 성공:\", response.data);\n        localStorage.removeItem(\"accessToken\");\n        localStorage.removeItem(\"refreshToken\");\n        localStorage.removeItem(\"loginType\");\n        this.isLoggedIn = false; // 상태 업데이트\n\n        if (response.data.data) {\n          window.location.href = response.data.data; // 소셜 로그아웃 리다이렉트\n        } else {\n          this.$router.push(\"/\");\n        }\n      }).catch(error => {\n        console.error(\"로그아웃 실패:\", error.response?.data?.message || error.message);\n      });\n    }\n  }\n};","map":{"version":3,"names":["api","name","data","isLoggedIn","localStorage","getItem","methods","handleAuth","logout","$router","push","refreshToken","loginType","console","error","post","then","response","log","removeItem","window","location","href","catch","message"],"sources":["C:\\Users\\mycoms\\Desktop\\study\\duckfront\\src\\components\\NavBar.vue"],"sourcesContent":["<template>\r\n  <nav class=\"navbar\">\r\n    <div class=\"logo\">\r\n      <router-link to=\"/\">DUCK TEL</router-link>\r\n    </div>\r\n    <div class=\"menu\">\r\n      <router-link to=\"/mypage\" v-if=\"isLoggedIn\">마이페이지</router-link>\r\n      <button @click=\"handleAuth\">{{ isLoggedIn ? \"로그아웃\" : \"로그인\" }}</button>\r\n    </div>\r\n  </nav>\r\n</template>\r\n\r\n<script>\r\nimport api from \"../api\";\r\n\r\nexport default {\r\n  name: \"NavBar\",\r\n  data() {\r\n    return {\r\n      isLoggedIn: !!localStorage.getItem(\"accessToken\"),\r\n    };\r\n  },\r\n  methods: {\r\n    handleAuth() {\r\n      if (this.isLoggedIn) {\r\n        this.logout();\r\n      } else {\r\n        this.$router.push(\"/login\"); // 로그인 페이지로 이동\r\n      }\r\n    },\r\n    logout() {\r\n      const refreshToken = localStorage.getItem(\"refreshToken\");\r\n      const loginType = localStorage.getItem(\"loginType\");\r\n\r\n      if (!refreshToken || !loginType) {\r\n        console.error(\"로그아웃 실패: 저장된 로그인 정보 없음\");\r\n        return;\r\n      }\r\n\r\n      api.post(\"/api/auth/logout\", { refreshToken, loginType })\r\n        .then(response => {\r\n          console.log(\"로그아웃 성공:\", response.data);\r\n\r\n          localStorage.removeItem(\"accessToken\");\r\n          localStorage.removeItem(\"refreshToken\");\r\n          localStorage.removeItem(\"loginType\");\r\n\r\n          this.isLoggedIn = false; // 상태 업데이트\r\n\r\n          if (response.data.data) {\r\n            window.location.href = response.data.data; // 소셜 로그아웃 리다이렉트\r\n          } else {\r\n            this.$router.push(\"/\");\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(\"로그아웃 실패:\", error.response?.data?.message || error.message);\r\n        });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.navbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px 20px;\r\n  background: #007bff;\r\n  color: white;\r\n}\r\n\r\n.logo {\r\n  flex: 1; \r\n  text-align: center;\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.logo a {\r\n  color: white;\r\n  text-decoration: none;\r\n}\r\n\r\n.menu {\r\n  display: flex;\r\n  gap: 15px;\r\n  align-items: center;\r\n}\r\n\r\n.menu a, .menu button {\r\n  color: white;\r\n  text-decoration: none;\r\n  background: none;\r\n  border: none;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.menu button {\r\n  padding: 8px 12px;\r\n  background-color: white;\r\n  color: #007bff;\r\n  border-radius: 5px;\r\n}\r\n\r\n.menu button:hover {\r\n  background-color: #0056b3;\r\n  color: white;\r\n}\r\n</style>\r\n"],"mappings":";AAaA,OAAOA,GAAE,MAAO,QAAQ;AAExB,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa;IAClD,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACJ,UAAU,EAAE;QACnB,IAAI,CAACK,MAAM,CAAC,CAAC;MACf,OAAO;QACL,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;MAC/B;IACF,CAAC;IACDF,MAAMA,CAAA,EAAG;MACP,MAAMG,YAAW,GAAIP,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,MAAMO,SAAQ,GAAIR,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAEnD,IAAI,CAACM,YAAW,IAAK,CAACC,SAAS,EAAE;QAC/BC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;QACvC;MACF;MAEAd,GAAG,CAACe,IAAI,CAAC,kBAAkB,EAAE;QAAEJ,YAAY;QAAEC;MAAU,CAAC,EACrDI,IAAI,CAACC,QAAO,IAAK;QAChBJ,OAAO,CAACK,GAAG,CAAC,UAAU,EAAED,QAAQ,CAACf,IAAI,CAAC;QAEtCE,YAAY,CAACe,UAAU,CAAC,aAAa,CAAC;QACtCf,YAAY,CAACe,UAAU,CAAC,cAAc,CAAC;QACvCf,YAAY,CAACe,UAAU,CAAC,WAAW,CAAC;QAEpC,IAAI,CAAChB,UAAS,GAAI,KAAK,EAAE;;QAEzB,IAAIc,QAAQ,CAACf,IAAI,CAACA,IAAI,EAAE;UACtBkB,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAIL,QAAQ,CAACf,IAAI,CAACA,IAAI,EAAE;QAC7C,OAAO;UACL,IAAI,CAACO,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;QACxB;MACF,CAAC,EACAa,KAAK,CAACT,KAAI,IAAK;QACdD,OAAO,CAACC,KAAK,CAAC,UAAU,EAAEA,KAAK,CAACG,QAAQ,EAAEf,IAAI,EAAEsB,OAAM,IAAKV,KAAK,CAACU,OAAO,CAAC;MAC3E,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}