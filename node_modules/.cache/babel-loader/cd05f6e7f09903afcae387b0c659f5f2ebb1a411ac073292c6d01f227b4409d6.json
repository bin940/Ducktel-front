{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport api from \"../api\";\nexport default {\n  name: \"LoginForm\",\n  data() {\n    return {\n      username: \"\",\n      password: \"\"\n    };\n  },\n  mounted() {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has(\"accessToken\")) {\n      this.handleSocialLoginCallback();\n    }\n  },\n  methods: {\n    async handleLogin() {\n      try {\n        const formData = new URLSearchParams();\n        formData.append(\"username\", this.username);\n        formData.append(\"password\", this.password);\n        const response = await api.post(\"/api/auth/login\", formData, {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          }\n        });\n        console.log(\"로그인 성공:\", response.data);\n        this.processLoginResponse(response.data);\n      } catch (error) {\n        const errorResponse = error.response?.data;\n        console.error(\"로그인 실패:\", errorResponse?.message || error.message);\n      }\n    },\n    processLoginResponse(data) {\n      const tokens = data.data;\n      if (!tokens || !tokens.accessToken || !tokens.refreshToken) {\n        console.error(\"로그인 응답에 토큰 없음\", tokens);\n        return;\n      }\n      console.log(\"토큰 저장 중...\");\n      localStorage.setItem(\"accessToken\", tokens.accessToken);\n      localStorage.setItem(\"refreshToken\", tokens.refreshToken);\n      lo;\n      const redirectUrl = sessionStorage.getItem(\"redirectUrl\") || \"/\";\n      sessionStorage.removeItem(\"redirectUrl\");\n      console.log(`로그인 성공, ${redirectUrl}로 이동`);\n      this.$router.push(redirectUrl);\n    },\n    socialLogin(provider) {\n      const redirectUri = `${window.location.origin}/login?redirect=${encodeURIComponent(this.$route.fullPath)}`;\n      const authUrl = `http://localhost:8090/oauth2/authorization/${provider}?redirect_uri=${encodeURIComponent(redirectUri)}`;\n      console.log(`소셜 로그인 리다이렉트: ${authUrl}`);\n      window.location.href = authUrl;\n    },\n    handleSocialLoginCallback() {\n      const urlParams = new URLSearchParams(window.location.search);\n      const accessToken = urlParams.get(\"accessToken\");\n      const refreshToken = urlParams.get(\"refreshToken\");\n      const loginType = urlParams.get(\"loginType\");\n      if (accessToken && refreshToken && loginType) {\n        console.log(\"소셜 로그인 성공 - 토큰:\", accessToken);\n        localStorage.setItem(\"accessToken\", accessToken);\n        localStorage.setItem(\"refreshToken\", refreshToken);\n        localStorage.setItem(\"loginType\", loginType);\n        console.log(\"저장된 accessToken 확인:\", localStorage.getItem(\"accessToken\"));\n        console.log(\"저장된 refreshToken 확인:\", localStorage.getItem(\"refreshToken\"));\n        const redirectUrl = sessionStorage.getItem(\"redirectUrl\") || \"/\";\n        sessionStorage.removeItem(\"redirectUrl\");\n        this.$router.push(redirectUrl);\n        window.history.replaceState({}, document.title, \"/login\");\n      } else {\n        console.error(\"소셜 로그인 실패: 필요한 토큰 정보가 없습니다.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","name","data","username","password","mounted","urlParams","URLSearchParams","window","location","search","has","handleSocialLoginCallback","methods","handleLogin","formData","append","response","post","headers","console","log","processLoginResponse","error","errorResponse","message","tokens","accessToken","refreshToken","localStorage","setItem","lo","redirectUrl","sessionStorage","getItem","removeItem","$router","push","socialLogin","provider","redirectUri","origin","encodeURIComponent","$route","fullPath","authUrl","href","get","loginType","history","replaceState","document","title"],"sources":["C:\\Users\\mycoms\\Desktop\\study\\duckfront\\src\\components\\LoginForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <h2>로그인</h2>\r\n    <form @submit.prevent=\"handleLogin\">\r\n      <div>\r\n        <label>아이디: <input v-model=\"username\" required /></label>\r\n      </div>\r\n      <div>\r\n        <label>비밀번호: <input type=\"password\" v-model=\"password\" required /></label>\r\n      </div>\r\n      <button type=\"submit\">로그인</button>\r\n    </form>\r\n    <router-link to=\"/register\">회원가입</router-link>\r\n\r\n    <div class=\"social-login\">\r\n      <button @click=\"socialLogin('google')\" class=\"google-btn\">구글로 로그인</button>\r\n      <button @click=\"socialLogin('kakao')\" class=\"kakao-btn\">카카오로 로그인</button>\r\n      <button @click=\"socialLogin('naver')\" class=\"naver-btn\">네이버로 로그인</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"../api\"; \r\n\r\nexport default {\r\n  name: \"LoginForm\",\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      password: \"\",\r\n    };\r\n  },\r\n  mounted() {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    if (urlParams.has(\"accessToken\")) {\r\n      this.handleSocialLoginCallback();\r\n    }\r\n  },\r\n  methods: {\r\n  async handleLogin() {\r\n    try {\r\n      const formData = new URLSearchParams();\r\n      formData.append(\"username\", this.username);\r\n      formData.append(\"password\", this.password);\r\n\r\n      const response = await api.post(\"/api/auth/login\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n      });\r\n\r\n      console.log(\"로그인 성공:\", response.data);\r\n      this.processLoginResponse(response.data);\r\n\r\n    } catch (error) {\r\n      const errorResponse = error.response?.data;\r\n      console.error(\"로그인 실패:\", errorResponse?.message || error.message);\r\n    }\r\n  },\r\n\r\n  processLoginResponse(data) { \r\n    const tokens = data.data;\r\n    if (!tokens || !tokens.accessToken || !tokens.refreshToken) {\r\n    console.error(\"로그인 응답에 토큰 없음\", tokens);\r\n    return;\r\n  }\r\n\r\n  console.log(\"토큰 저장 중...\");\r\n  localStorage.setItem(\"accessToken\", tokens.accessToken);\r\n  localStorage.setItem(\"refreshToken\", tokens.refreshToken);\r\n  lo\r\n\r\n  const redirectUrl = sessionStorage.getItem(\"redirectUrl\") || \"/\";\r\n  sessionStorage.removeItem(\"redirectUrl\");\r\n\r\n  console.log(`로그인 성공, ${redirectUrl}로 이동`);\r\n  this.$router.push(redirectUrl);\r\n  },\r\n\r\n  socialLogin(provider) {\r\n    const redirectUri = `${window.location.origin}/login?redirect=${encodeURIComponent(this.$route.fullPath)}`;\r\n    const authUrl = `http://localhost:8090/oauth2/authorization/${provider}?redirect_uri=${encodeURIComponent(redirectUri)}`;\r\n\r\n    console.log(`소셜 로그인 리다이렉트: ${authUrl}`);\r\n    window.location.href = authUrl;\r\n  },\r\n\r\n  handleSocialLoginCallback() {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const accessToken = urlParams.get(\"accessToken\");\r\n    const refreshToken = urlParams.get(\"refreshToken\");\r\n    const loginType = urlParams.get(\"loginType\");\r\n\r\n    if (accessToken && refreshToken && loginType) {\r\n      console.log(\"소셜 로그인 성공 - 토큰:\", accessToken);\r\n      localStorage.setItem(\"accessToken\", accessToken);\r\n      localStorage.setItem(\"refreshToken\", refreshToken);\r\n      localStorage.setItem(\"loginType\", loginType);\r\n\r\n      console.log(\"저장된 accessToken 확인:\", localStorage.getItem(\"accessToken\"));\r\n      console.log(\"저장된 refreshToken 확인:\", localStorage.getItem(\"refreshToken\"));\r\n\r\n      const redirectUrl = sessionStorage.getItem(\"redirectUrl\") || \"/\";\r\n      sessionStorage.removeItem(\"redirectUrl\");\r\n      this.$router.push(redirectUrl);\r\n\r\n      window.history.replaceState({}, document.title, \"/login\");\r\n    } else {\r\n      console.error(\"소셜 로그인 실패: 필요한 토큰 정보가 없습니다.\");\r\n    }\r\n  }\r\n}\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  max-width: 400px;\r\n  margin: 50px auto;\r\n  padding: 20px;\r\n}\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\nbutton {\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n}\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n.social-login {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n.google-btn {\r\n  background-color: #4285f4;\r\n}\r\n.google-btn:hover {\r\n  background-color: #357abd;\r\n}\r\n.kakao-btn {\r\n  background-color: #fee500;\r\n  color: #3c1e1e;\r\n}\r\n.kakao-btn:hover {\r\n  background-color: #e6ce00;\r\n}\r\n.naver-btn {\r\n  background-color: #03c75a;\r\n}\r\n.naver-btn:hover {\r\n  background-color: #02a44f;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}