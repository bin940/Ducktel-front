{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport router from \"../router\";\nconst api = axios.create({\n  baseURL: \"http://\"\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"accessToken\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    if (refreshToken) {\n      try {\n        const {\n          data\n        } = await axios.post(\"http://your-api-url/api/refresh\", {\n          refreshToken\n        });\n        const newAccessToken = data.accessToken;\n        localStorage.setItem(\"accessToken\", newAccessToken);\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        console.error(\"리프레시 토큰 실패:\", refreshError);\n        localStorage.removeItem(\"accessToken\");\n        localStorage.removeItem(\"refreshToken\");\n        alert(\"세션이 만료되었습니다. 다시 로그인해 주세요.\");\n        router.push(\"/login\");\n        return Promise.reject(refreshError);\n      }\n    } else {\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n      alert(\"로그인 정보가 없습니다. 다시 로그인해 주세요.\");\n      router.push(\"/login\");\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","router","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","originalRequest","status","_retry","refreshToken","data","post","newAccessToken","accessToken","setItem","refreshError","console","removeItem","alert","push","Promise","reject"],"sources":["C:/Users/mycoms/Desktop/study/duckfront/src/api/index.js"],"sourcesContent":["import axios from \"axios\";\r\nimport router from \"../router\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"http://\",\r\n});\r\n\r\n\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"accessToken\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true; \r\n      const refreshToken = localStorage.getItem(\"refreshToken\");\r\n      \r\n      if (refreshToken) {\r\n        try {\r\n          const { data } = await axios.post(\r\n            \"http://your-api-url/api/refresh\", \r\n            { refreshToken }\r\n          );\r\n          const newAccessToken = data.accessToken;\r\n          localStorage.setItem(\"accessToken\", newAccessToken);\r\n          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n          return api(originalRequest);\r\n        } catch (refreshError) {\r\n          console.error(\"리프레시 토큰 실패:\", refreshError);\r\n          localStorage.removeItem(\"accessToken\");\r\n          localStorage.removeItem(\"refreshToken\");\r\n          alert(\"세션이 만료되었습니다. 다시 로그인해 주세요.\");\r\n          router.push(\"/login\");\r\n          return Promise.reject(refreshError);\r\n        }\r\n      } else {\r\n        localStorage.removeItem(\"accessToken\");\r\n        localStorage.removeItem(\"refreshToken\");\r\n        alert(\"로그인 정보가 없습니다. 다시 로그인해 주세요.\");\r\n        router.push(\"/login\");\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAE9B,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAGFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAGFN,GAAG,CAACG,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC1BO,QAAQ,IAAKA,QAAQ,EACtB,MAAOC,KAAK,IAAK;EACf,MAAMC,eAAe,GAAGD,KAAK,CAACP,MAAM;EACpC,IAAIO,KAAK,CAACD,QAAQ,IAAIC,KAAK,CAACD,QAAQ,CAACG,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC9EF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,MAAMC,YAAY,GAAGT,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAEzD,IAAIQ,YAAY,EAAE;MAChB,IAAI;QACF,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAC/B,iCAAiC,EACjC;UAAEF;QAAa,CACjB,CAAC;QACD,MAAMG,cAAc,GAAGF,IAAI,CAACG,WAAW;QACvCb,YAAY,CAACc,OAAO,CAAC,aAAa,EAAEF,cAAc,CAAC;QACnDN,eAAe,CAACJ,OAAO,CAACC,aAAa,GAAG,UAAUS,cAAc,EAAE;QAClE,OAAOpB,GAAG,CAACc,eAAe,CAAC;MAC7B,CAAC,CAAC,OAAOS,YAAY,EAAE;QACrBC,OAAO,CAACX,KAAK,CAAC,aAAa,EAAEU,YAAY,CAAC;QAC1Cf,YAAY,CAACiB,UAAU,CAAC,aAAa,CAAC;QACtCjB,YAAY,CAACiB,UAAU,CAAC,cAAc,CAAC;QACvCC,KAAK,CAAC,2BAA2B,CAAC;QAClC3B,MAAM,CAAC4B,IAAI,CAAC,QAAQ,CAAC;QACrB,OAAOC,OAAO,CAACC,MAAM,CAACN,YAAY,CAAC;MACrC;IACF,CAAC,MAAM;MACLf,YAAY,CAACiB,UAAU,CAAC,aAAa,CAAC;MACtCjB,YAAY,CAACiB,UAAU,CAAC,cAAc,CAAC;MACvCC,KAAK,CAAC,4BAA4B,CAAC;MACnC3B,MAAM,CAAC4B,IAAI,CAAC,QAAQ,CAAC;IACvB;EACF;EACA,OAAOC,OAAO,CAACC,MAAM,CAAChB,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}