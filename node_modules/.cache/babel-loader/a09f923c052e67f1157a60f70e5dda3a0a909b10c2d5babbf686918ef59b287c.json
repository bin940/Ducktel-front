{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from \"../api\";\nexport default {\n  name: \"NavBar\",\n  data() {\n    return {\n      isLoggedIn: false\n    };\n  },\n  created() {\n    this.updateLoginStatus();\n    window.addEventListener(\"storage\", this.updateLoginStatus);\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"storage\", this.updateLoginStatus);\n  },\n  watch: {\n    '$route'() {\n      if (this.$el) {\n        this.updateLoginStatus();\n      }\n    }\n  },\n  methods: {\n    handleAuth() {\n      if (this.isLoggedIn) {\n        this.logout();\n      } else {\n        this.$router.push(\"/login\");\n      }\n    },\n    logout() {\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n      const loginType = localStorage.getItem(\"loginType\");\n      if (!refreshToken || !loginType) {\n        console.error(\"로그아웃 실패: 저장된 로그인 정보 없음\");\n        return;\n      }\n      api.post(\"/api/auth/logout\", {\n        refreshToken,\n        loginType\n      }).then(response => {\n        console.log(\"로그아웃 성공:\", response.data);\n        localStorage.removeItem(\"accessToken\");\n        localStorage.removeItem(\"refreshToken\");\n        localStorage.removeItem(\"loginType\");\n        console.log(\"로그아웃 후 localStorage 값:\", localStorage.getItem(\"accessToken\"));\n        this.updateLoginStatus();\n        this.$router.push(\"/\");\n      }).catch(error => {\n        console.error(\"로그아웃 실패:\", error.response?.data?.message || error.message);\n      });\n    },\n    updateLoginStatus() {\n      const accessToken = localStorage.getItem(\"accessToken\");\n      this.isLoggedIn = !!accessToken;\n      this.$forceUpdate();\n    }\n  }\n};","map":{"version":3,"names":["api","name","data","isLoggedIn","created","updateLoginStatus","window","addEventListener","beforeUnmount","removeEventListener","watch","$route","$el","methods","handleAuth","logout","$router","push","refreshToken","localStorage","getItem","loginType","console","error","post","then","response","log","removeItem","catch","message","accessToken","$forceUpdate"],"sources":["C:\\Users\\mycoms\\Desktop\\study\\duckfront\\src\\components\\NavBar.vue"],"sourcesContent":["<template>\r\n  <nav class=\"navbar\">\r\n    <div class=\"logo\">\r\n      <router-link to=\"/\">DUCK TEL</router-link>\r\n    </div>\r\n    <div class=\"menu\">\r\n      <router-link to=\"/mypage\" v-if=\"isLoggedIn\">마이페이지</router-link>\r\n      <button @click=\"handleAuth\">{{ isLoggedIn ? \"로그아웃\" : \"로그인\" }}</button>\r\n    </div>\r\n  </nav>\r\n</template>\r\n\r\n<script>\r\nimport api from \"../api\";\r\n\r\nexport default {\r\n  name: \"NavBar\",\r\n  data() {\r\n    return {\r\n      isLoggedIn: false\r\n    };\r\n  },\r\n  created() {\r\n    this.updateLoginStatus();\r\n    window.addEventListener(\"storage\", this.updateLoginStatus);\r\n  },\r\n  beforeUnmount() {\r\n    window.removeEventListener(\"storage\", this.updateLoginStatus);\r\n  },\r\n  watch: {\r\n    '$route'() {\r\n      if (this.$el) {\r\n        this.updateLoginStatus();\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    handleAuth() {\r\n      if (this.isLoggedIn) {\r\n        this.logout();\r\n      } else {\r\n        this.$router.push(\"/login\");\r\n      }\r\n    },\r\n    logout() {\r\n      const refreshToken = localStorage.getItem(\"refreshToken\");\r\n      const loginType = localStorage.getItem(\"loginType\");\r\n\r\n      if (!refreshToken || !loginType) {\r\n        console.error(\"로그아웃 실패: 저장된 로그인 정보 없음\");\r\n        return;\r\n      }\r\n\r\n      api.post(\"/api/auth/logout\", { refreshToken, loginType })\r\n        .then(response => {\r\n          console.log(\"로그아웃 성공:\", response.data);\r\n\r\n          localStorage.removeItem(\"accessToken\");\r\n          localStorage.removeItem(\"refreshToken\");\r\n          localStorage.removeItem(\"loginType\");\r\n\r\n          console.log(\"로그아웃 후 localStorage 값:\", localStorage.getItem(\"accessToken\"));\r\n\r\n          this.updateLoginStatus();\r\n          this.$router.push(\"/\");\r\n        })\r\n        .catch(error => {\r\n          console.error(\"로그아웃 실패:\", error.response?.data?.message || error.message);\r\n        });\r\n    },\r\n    updateLoginStatus() {\r\n      const accessToken = localStorage.getItem(\"accessToken\");\r\n      this.isLoggedIn = !!accessToken;\r\n      this.$forceUpdate();\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";AAaA,OAAOA,GAAE,MAAO,QAAQ;AAExB,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,iBAAiB,CAAC,CAAC;IACxBC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACF,iBAAiB,CAAC;EAC5D,CAAC;EACDG,aAAaA,CAAA,EAAG;IACdF,MAAM,CAACG,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACJ,iBAAiB,CAAC;EAC/D,CAAC;EACDK,KAAK,EAAE;IACL,QAAQC,CAAA,EAAG;MACT,IAAI,IAAI,CAACC,GAAG,EAAE;QACZ,IAAI,CAACP,iBAAiB,CAAC,CAAC;MAC1B;IACF;EACF,CAAC;EACDQ,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACX,UAAU,EAAE;QACnB,IAAI,CAACY,MAAM,CAAC,CAAC;MACf,OAAO;QACL,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;MAC7B;IACF,CAAC;IACDF,MAAMA,CAAA,EAAG;MACP,MAAMG,YAAW,GAAIC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,MAAMC,SAAQ,GAAIF,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAEnD,IAAI,CAACF,YAAW,IAAK,CAACG,SAAS,EAAE;QAC/BC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;QACvC;MACF;MAEAvB,GAAG,CAACwB,IAAI,CAAC,kBAAkB,EAAE;QAAEN,YAAY;QAAEG;MAAU,CAAC,EACrDI,IAAI,CAACC,QAAO,IAAK;QAChBJ,OAAO,CAACK,GAAG,CAAC,UAAU,EAAED,QAAQ,CAACxB,IAAI,CAAC;QAEtCiB,YAAY,CAACS,UAAU,CAAC,aAAa,CAAC;QACtCT,YAAY,CAACS,UAAU,CAAC,cAAc,CAAC;QACvCT,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC;QAEpCN,OAAO,CAACK,GAAG,CAAC,wBAAwB,EAAER,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;QAE1E,IAAI,CAACf,iBAAiB,CAAC,CAAC;QACxB,IAAI,CAACW,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;MACxB,CAAC,EACAY,KAAK,CAACN,KAAI,IAAK;QACdD,OAAO,CAACC,KAAK,CAAC,UAAU,EAAEA,KAAK,CAACG,QAAQ,EAAExB,IAAI,EAAE4B,OAAM,IAAKP,KAAK,CAACO,OAAO,CAAC;MAC3E,CAAC,CAAC;IACN,CAAC;IACDzB,iBAAiBA,CAAA,EAAG;MAClB,MAAM0B,WAAU,GAAIZ,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;MACvD,IAAI,CAACjB,UAAS,GAAI,CAAC,CAAC4B,WAAW;MAC/B,IAAI,CAACC,YAAY,CAAC,CAAC;IACrB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}