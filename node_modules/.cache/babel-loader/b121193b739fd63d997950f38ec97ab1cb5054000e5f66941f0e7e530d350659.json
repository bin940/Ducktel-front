{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport api from \"../api\";\nexport default {\n  name: \"LoginForm\",\n  data() {\n    return {\n      username: \"\",\n      password: \"\"\n    };\n  },\n  methods: {\n    async handleLogin() {\n      try {\n        const formData = new URLSearchParams();\n        formData.append(\"username\", this.username);\n        formData.append(\"password\", this.password);\n        const response = await api.post(\"/api/auth/login\", formData, {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          }\n        });\n        const result = response.data;\n        console.log(\"백엔드 응답:\", result);\n        if (result.additionalData && result.additionalData.accessToken) {\n          console.log(\"로그인 성공 - 토큰:\", result.additionalData.accessToken);\n          localStorage.setItem(\"accessToken\", result.additionalData.accessToken);\n          localStorage.setItem(\"refreshToken\", result.additionalData.refreshToken);\n          localStorage.setItem(\"loginType\", result.additionalData.loginType);\n          console.log(\"저장된 accessToken 확인:\", localStorage.getItem(\"accessToken\"));\n          console.log(\"저장된 refreshToken 확인:\", localStorage.getItem(\"refreshToken\"));\n          const redirect = this.$route.query.redirect || \"/\";\n          this.$router.push(redirect);\n        } else {\n          console.error(\"로그인 실패:\", result.message || \"응답 데이터에 토큰이 없습니다.\");\n        }\n      } catch (error) {\n        const errorResponse = error.response?.data;\n        console.error(\"로그인 실패:\", errorResponse?.message || error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","name","data","username","password","methods","handleLogin","formData","URLSearchParams","append","response","post","headers","result","console","log","additionalData","accessToken","localStorage","setItem","refreshToken","loginType","getItem","redirect","$route","query","$router","push","error","message","errorResponse"],"sources":["C:\\Users\\mycoms\\Desktop\\study\\duckfront\\src\\components\\LoginForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <h2>로그인</h2>\r\n    <form @submit.prevent=\"handleLogin\">\r\n      <div>\r\n        <label>아이디: <input v-model=\"username\" required /></label>\r\n      </div>\r\n      <div>\r\n        <label>비밀번호: <input type=\"password\" v-model=\"password\" required /></label>\r\n      </div>\r\n      <button type=\"submit\">로그인</button>\r\n    </form>\r\n    <router-link to=\"/register\">회원가입</router-link>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"../api\";\r\n\r\nexport default {\r\n  name: \"LoginForm\",\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      password: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    async handleLogin() {\r\n      try {\r\n        const formData = new URLSearchParams();\r\n        formData.append(\"username\", this.username);\r\n        formData.append(\"password\", this.password);\r\n\r\n        const response = await api.post(\"/api/auth/login\", formData, {\r\n          headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          },\r\n        });\r\n        const result = response.data;\r\n        console.log(\"백엔드 응답:\", result);\r\n\r\n        if (result.additionalData && result.additionalData.accessToken) {\r\n          console.log(\"로그인 성공 - 토큰:\", result.additionalData.accessToken);\r\n          localStorage.setItem(\"accessToken\", result.additionalData.accessToken);\r\n          localStorage.setItem(\"refreshToken\", result.additionalData.refreshToken);\r\n          localStorage.setItem(\"loginType\", result.additionalData.loginType);\r\n          console.log(\"저장된 accessToken 확인:\", localStorage.getItem(\"accessToken\"));\r\n          console.log(\"저장된 refreshToken 확인:\", localStorage.getItem(\"refreshToken\"));\r\n\r\n          const redirect = this.$route.query.redirect || \"/\";\r\n          this.$router.push(redirect);\r\n        } else {\r\n          console.error(\"로그인 실패:\", result.message || \"응답 데이터에 토큰이 없습니다.\");\r\n        }\r\n      } catch (error) {\r\n        const errorResponse = error.response?.data;\r\n        console.error(\"로그인 실패:\", errorResponse?.message || error.message);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  max-width: 400px;\r\n  margin: 50px auto;\r\n  padding: 20px;\r\n}\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\nbutton {\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n}\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n</style>"],"mappings":";;;;AAiBA,OAAOA,GAAE,MAAO,QAAQ;AAExB,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,QAAO,GAAI,IAAIC,eAAe,CAAC,CAAC;QACtCD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAACN,QAAQ,CAAC;QAC1CI,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAACL,QAAQ,CAAC;QAE1C,MAAMM,QAAO,GAAI,MAAMV,GAAG,CAACW,IAAI,CAAC,iBAAiB,EAAEJ,QAAQ,EAAE;UAC3DK,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QACF,MAAMC,MAAK,GAAIH,QAAQ,CAACR,IAAI;QAC5BY,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,MAAM,CAAC;QAE9B,IAAIA,MAAM,CAACG,cAAa,IAAKH,MAAM,CAACG,cAAc,CAACC,WAAW,EAAE;UAC9DH,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,MAAM,CAACG,cAAc,CAACC,WAAW,CAAC;UAC9DC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEN,MAAM,CAACG,cAAc,CAACC,WAAW,CAAC;UACtEC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEN,MAAM,CAACG,cAAc,CAACI,YAAY,CAAC;UACxEF,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEN,MAAM,CAACG,cAAc,CAACK,SAAS,CAAC;UAClEP,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEG,YAAY,CAACI,OAAO,CAAC,aAAa,CAAC,CAAC;UACvER,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEG,YAAY,CAACI,OAAO,CAAC,cAAc,CAAC,CAAC;UAEzE,MAAMC,QAAO,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,QAAO,IAAK,GAAG;UAClD,IAAI,CAACG,OAAO,CAACC,IAAI,CAACJ,QAAQ,CAAC;QAC7B,OAAO;UACLT,OAAO,CAACc,KAAK,CAAC,SAAS,EAAEf,MAAM,CAACgB,OAAM,IAAK,mBAAmB,CAAC;QACjE;MACF,EAAE,OAAOD,KAAK,EAAE;QACd,MAAME,aAAY,GAAIF,KAAK,CAAClB,QAAQ,EAAER,IAAI;QAC1CY,OAAO,CAACc,KAAK,CAAC,SAAS,EAAEE,aAAa,EAAED,OAAM,IAAKD,KAAK,CAACC,OAAO,CAAC;MACnE;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}